// This file is a part of the ProceduralUniverse
// Copyright (C) 2013-2014  Mifan Bang <http://debug.tw>


uniform vec2	u_random;


// ref: http://filmicgames.com/archives/75
vec3 CalcToneMapUncharted2(vec3 hdrColor) {
	float A = 0.22;  // shoulder strength
	float B = 0.30;  // linear strength
	float C = 0.10;  // linear angle
	float D = 0.20;  // toe strength
	float E = 0.02;  // toe numerator
	float F = 0.30;  // toe denominator
	return ((hdrColor * (A * hdrColor + C * B) + D * E) / (hdrColor * (A * hdrColor + B) + D * F)) - E / F;
}

vec3 ConvertLinearToSRGB(vec3 linearColor) {
	return pow(linearColor, vec3(0.4545));
}

float GetGrain(vec2 co) {
	float f = sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453;
	return fract(f);
}

void main(void) {
	const float irradianceSun = 3.0;

	LightingResult surface = DrawSurfaceColor(v_modelPosition);
	vec3 viewDir = normalize(cameraPosition - v_worldPosition);
	vec3 radiance;

	// diffuse term: Loomel-Seeliger model
	vec3 diffuse = CalcLommelSeeliger(
		max(surface.albedo, vec3(0.0)),
		v_worldNormal,	// N
		-u_lightDir,	// L
		viewDir			// V
	);

	// specular term: Torrance-Sparrow model
	if (surface.glossiness > 0.0) {  // only render highlights if glossiness is explicitly assigned in DrawSurfaceColor()
		vec3 fresnel;
		vec3 specular = CalcTorranceSparrow(
			v_worldNormal,	// N
			-u_lightDir,	// L
			viewDir,		// V
			surface.glossiness,
			surface.specularColor,
			fresnel  // output: fresnel term
		);
		radiance = diffuse * (vec3(1.0) - fresnel) + specular;  // energy conservative
	}
	else
		radiance = diffuse;

	radiance = CalcToneMapUncharted2(radiance * irradianceSun);
	gl_FragColor = vec4(ConvertLinearToSRGB(radiance), 1.0);
	gl_FragColor.xyz += (GetGrain(gl_FragCoord.xy + u_random) - 0.5) / 256.0;  // anti-banding
}
