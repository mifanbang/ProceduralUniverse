// This file is a part of the ProceduralUniverse
// Copyright (C) 2013-2014  Mifan Bang <http://debug.tw>


LightingResult DrawSurfaceColor(vec3 position) {
	vec3 outputColor;

	const float spotThreshold = 0.65;  // greater for fewer and smaller spots
	const vec3 base = vec3(0.076, 0.15, 1.0);  // base color
	const vec3 bright = vec3(0.082, 0.25, 1.0);  // a brighter color
	const vec3 dark = vec3(0.026, 0.029, 0.60);  // another dark color

	// base + dark stripes (very low frequency)
	float y = position.y / 6.0;
	vec3 yPos = vec3(y);
	float f = 0.6 + fBmOrder4(yPos);
	f = clamp(f * 0.5 + 0.5, 0.0, 1.0);  // rescale to [0, 1.0]
	outputColor = mix(dark, base, f);

	// stripes of a bright color
	y = position.y * 3.0 + PerlinNoise(position * 5.0) / 80.0;
	yPos = vec3(y);
	f = fBmOrder2(yPos) * PerlinNoise(position * 0.5);
	f = max((f - 0.2) * 1.2, 0.0);  // some rescale
	outputColor = mix(outputColor, bright, f);

	// spot(s)
	float f2 = PerlinNoise(position / 2.0);
	if (f2 > spotThreshold) {
		f2 -= spotThreshold;
		f2 *= 6.0;
		outputColor = mix(outputColor, dark, f2);
	}

	LightingResult result;
	result.albedo = outputColor;
	return result;
}
