// This file is a part of the ProceduralUniverse
// Copyright (C) 2013-2014  Mifan Bang <http://debug.tw>


LightingResult DrawSurfaceColor(vec3 position) {
	vec3 outputColor;

	const vec3 displacement = vec3(54.38, 3.14, 1.68);  // a random displacement to fragment position
	const vec3 base = vec3(0.47, 0.33, 0.13);  // base color
	const vec3 cloud1 = vec3(0.91, 0.85, 0.49);  // a cloud color
	const vec3 cloud2 = vec3(0.77, 0.65, 0.21);  // another cloud color
	const vec3 dark = vec3(0.20, 0.18, 0.11);  // dark cloud color

	// let y-component dominate while x- and z-component still contribute in a small portion
	vec3 pos = vec3(position.x / 3.0, position.y, position.z / 3.0);

	// base + first cloud color
	float f = 0.3 + fBmOrder4(pos / 3.0);
	f = clamp(f * 0.5 + 0.5, 0.0, 1.0);  // rescale to [0, 1]
	outputColor = mix(cloud1, base, f);

	// second cloud color
	f = 0.2 + fBmOrder4((pos + displacement) / 2.0);
	f = clamp(f * 0.5 + 0.5, 0.0, 1.0);  // rescale to [0, 1]
	outputColor = mix(cloud2, outputColor, f);

	// some shaded clouds
	pos.y += fBmOrder2(position * 5.0) / 150.0;
	f = 0.45 + fBmOrder4(pos) * PerlinNoise(position / 2.0);
	f = clamp(f * 0.5 + 0.5, 0.0, 1.0);  // rescale to [0, 1]
	outputColor = mix(dark, outputColor, f);

	LightingResult result;
	result.albedo = outputColor;
	return result;
}
