// This file is a part of the ProceduralUniverse
// Copyright (C) 2013-2014  Mifan Bang <http://debug.tw>


LightingResult DrawSurfaceColor(vec3 position) {
	LightingResult result;

	const float seaLevel = 0.25;  // greater for smaller land
	const float snowLevel = 0.6;  // greater for less snow
	const float cloudAmountOffset = -0.1;  // graater fo more clouds
	const vec3 land = vec3(0.031, 0.11, 0.005);  // land color
	const vec3 mountain = vec3(0.47, 0.37, 0.029);  // mountain color
	const vec3 ocean = vec3(0.0146, 0.0146, 0.20);  // ocean color
	const vec3 white = vec3(1.0);  // snow/cloud color
	const vec3 terrainDetailDisplacement = vec3(1.68, 54.38, 3.14);  // a random displacement to fragment position
	const vec3 cloudDisplacement = vec3(54.38, 3.14, 1.68);  // a random displacement to fragment position

	// generate surface altitude
	float surfaceAltiCoarse = fBmOrder4(position / 8.0);
	float surfaceAltiDetail = fBmOrder8(position + terrainDetailDisplacement);
	float f = mix(surfaceAltiCoarse, surfaceAltiDetail, 0.2);

	// determine land or ocean
	if (f > seaLevel) {
		result.albedo = mix(land, mountain, smoothstep(seaLevel, 1.0, f));

		if (f > snowLevel) {
			result.albedo = mix(result.albedo, white, (f - snowLevel) * 30.0);
			result.glossiness = 0.5 * min((f - snowLevel) * 30.0, 1.0);
			result.specularColor = vec3(0.01801);  // water ice
		}
		else {
			// Highlight at grazing angle is desired to be consistent with other part of Earth.
			// So we use a tiny value for glossiness that is just slightly larger than 0.
			result.glossiness = 1e-9;
			result.specularColor = vec3(0.0, 0.01, 0.0);  // a green-ish color (not physically-based)
		}
	}
	else {
		result.albedo = ocean;
		result.glossiness = 0.6 + (surfaceAltiDetail * 0.1);  // reuse surfaceAltiDetail to bring some visual variance
		result.specularColor = vec3(0.02732);  // liquid water
	}

	// cloud
	float cloudAmount = fBmOrder8((position + cloudDisplacement) / 1.6) + cloudAmountOffset;
	cloudAmount = max(cloudAmount, 0.0);
	result.albedo = mix(result.albedo, white * 2.5, cloudAmount);
	result.glossiness = mix(result.glossiness, 0.5, cloudAmount);

	return result;
}
