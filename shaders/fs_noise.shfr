// This file is a part of the ProceduralUniverse
// Copyright (C) 2013-2014  Mifan Bang <http://debug.tw>


uniform sampler2D	t_gradients;
uniform float		u_radius;
uniform vec3		u_lightDir;  // normalized expected
varying vec3		v_modelPosition;
varying vec3		v_worldPosition;
varying vec3		v_worldNormal;


float NoiseWeight(float t) {
	return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);  // 6*t^5 - 15*t^4 + 10*t^3
}

vec3 SamplePrecomputedGradient(float x, float y, float z) {
	float fx = mod(x, 256.0);
	float fy = mod(y, 256.0);

	float blockX = mod(z, 16.0) * 256.0;
	float blockY = floor(z / 16.0) * 256.0;
	vec2 index = vec2(blockX + fx, blockY + fy) + 0.5;

	return (texture2D(t_gradients, index / 4096.0).rgb * 16.0 - 1.0);
}

float Gradient(vec3 index, vec3 delta) {
	vec3 grad = SamplePrecomputedGradient(index.x, index.y, index.z);
	return dot(grad, delta);
}

float PerlinNoise(vec3 p) {
	p *= 6.0;  // some scaling

	// compute noise cell coordinates and offsets
	vec3 delta = fract(p);
	vec3 index = mod(floor(p), 256.0);

	float w000 = Gradient(index, delta);
	float w100 = Gradient(index + vec3(1.0, 0.0, 0.0), delta - vec3(1.0, 0.0, 0.0));
	float w010 = Gradient(index + vec3(0.0, 1.0, 0.0), delta - vec3(0.0, 1.0, 0.0));
	float w110 = Gradient(index + vec3(1.0, 1.0, 0.0), delta - vec3(1.0, 1.0, 0.0));
	float w001 = Gradient(index + vec3(0.0, 0.0, 1.0), delta - vec3(0.0, 0.0, 1.0));
	float w101 = Gradient(index + vec3(1.0, 0.0, 1.0), delta - vec3(1.0, 0.0, 1.0));
	float w011 = Gradient(index + vec3(0.0, 1.0, 1.0), delta - vec3(0.0, 1.0, 1.0));
	float w111 = Gradient(index + vec3(1.0, 1.0, 1.0), delta - vec3(1.0, 1.0, 1.0));

	// compute trilinear interpolation of weights
	float wx = NoiseWeight(delta.x);
	float wy = NoiseWeight(delta.y);
	float wz = NoiseWeight(delta.z);
	float x00 = mix(w000, w100, wx);
	float x10 = mix(w010, w110, wx);
	float x01 = mix(w001, w101, wx);
	float x11 = mix(w011, w111, wx);
	float y0 = mix(x00, x10, wy);
	float y1 = mix(x01, x11, wy);
	return mix(y0, y1, wz);
}

float fBmOrder2(vec3 v3Point) {
	return PerlinNoise(v3Point)
		+ 0.5 * PerlinNoise(v3Point * 2.0);
}
float fBmOrder4(vec3 v3Point) {
	return PerlinNoise(v3Point)
		+ 0.5 * PerlinNoise(v3Point * 2.0)
		+ 0.25 * PerlinNoise(v3Point * 4.0)
		+ 0.125 * PerlinNoise(v3Point * 8.0);
}
float fBmOrder8(vec3 v3Point) {
	return PerlinNoise(v3Point)
		+ 0.5 * PerlinNoise(v3Point * 2.0)
		+ 0.25 * PerlinNoise(v3Point * 4.0)
		+ 0.125 * PerlinNoise(v3Point * 8.0)
		+ 0.0625 * PerlinNoise(v3Point * 16.0)
		+ 0.03125 * PerlinNoise(v3Point * 32.0)
		+ 0.015625 * PerlinNoise(v3Point * 64.0)
		+ 0.0078125 * PerlinNoise(v3Point * 128.0);
}
